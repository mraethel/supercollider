TITLE:: LanguageConfig
SUMMARY:: Access and modify interpreter configuration
CATEGORIES:: Language

DESCRIPTION::
The LanguageConfig class provides access to the interpreter configuration.

SECTION:: Configuration File Format
Configuration files (YAML format) are passed in a specific order with 1, 3
and 4 being exclusive:

NUMBEREDLIST::
## CODE::sclang -l "/path/to/sclang_conf.yaml":: (sclang only)
## CODE::SCLANG_CONF_PATH="/path/to/sclang_conf_1.yaml:/path/to/sclang_conf_2.yaml":: (left to right)
NOTE::
Besides the character " : ", which simply appends configuration files, there is a " > " character
that only appends the first existing file from a chain of those.
::
## User configuration file (CODE::Platform.userConfigDir +/+ "sclang_conf.yaml"::)
## Global configuration file (CODE::"/etc/sclang_conf.yaml"::)
::

Each configuration file contains one dictionary. Semantics and merging behaviour
of the dictionary are given in the following table:

DEFINITIONLIST::
## TELETYPE::includePaths:: || List of paths to include in the class library
files. Paths are included if they were not excluded in a preceding or the same
configuration file.
## TELETYPE::excludePaths:: || List of paths to exclude from the class library
files. Paths are excluded if they were not included in a preceding configuration
file.
## TELETYPE::postInlineWarnings:: || Boolean flag to post warnings about missing
inline opportunities. The first configuration file including this option
sets its value. (default: CODE::false::)
## TELETYPE::excludeDefaultPaths:: || Boolean flag to set standalone mode. The
first configuration file including this option sets its value. (default:
CODE::false::)
NOTE::This option is ignored if the -a command option (sclang only) is specified.::
::

SUBSECTION:: Example

STRONG::sclang_conf_1.yaml::
CODE::
includePaths:
  - path1
  - path2  // Not included: path2 is excluded in the same file
excludePaths:
  - path2
excludeDefaultPaths: true
::

STRONG::sclang_conf_2.yaml::
CODE::
includePaths:
  - path2  // Not included: path2 was excluded before
excludePaths:
  - path1  // Not excluded: path1 was included before
postInlineWarnings: true
excludeDefaultPaths: false  // Second occurance therefore irrelavant
::

Running CODE::SCLANG_CONF_PATH="/path/to/sclang_conf_2.yaml" sclang -l "/path/to/sclang_conf_1.yaml":: results
in CODE::sclang_conf_1.yaml:: being passed EMPHASIS::before:: CODE::sclang_conf_2.yaml:: and merged into:

CODE::
includePath:
  - path1
excludePaths:
  - path2
postInlineWarnings: true
excludeDefaultPaths: true
::

However by running CODE::SCLANG_CONF_PATH="/path/to/sclang_conf_1.yaml>/path/to/sclang_conf_2.yaml" sclang:: 
only CODE::sclang_conf_1.yaml:: is being passed.

CLASSMETHODS::

METHOD:: store
Store the current configuration to file. Throws an error if the config file
cannot be opened or if writing fails.

ARGUMENT::
Path to the configuration file to store. If the value is CODE::nil:: it defaults
to currently used configuration file, as specified in the IDE preferences, or by
the CODE::sclang -l "/path/to/sclang_conf.yaml":: argument. By default this is
CODE::Platform.userConfigDir +/+ "sclang_conf.yaml"::

SUBSECTION:: Library Path Handling

The language configuration mechanism provides a way to add or exclude specific
paths for the class library.

NOTE::
Changes to the class library paths won't have any effect before the
configuration file is stored and the class library is recompiled.
::

METHOD:: includePaths
Return the class library include paths.

METHOD:: addIncludePath
Add new class library include path.

METHOD:: removeIncludePath
Remove path from class library include paths.

METHOD:: excludePaths
Return the class library exclude paths.

METHOD:: addExcludePath
Add new class library exclude path.

METHOD:: removeExcludePath
Remove path from class library exclude paths.

METHOD:: currentPath
Return the current config file path.

METHOD:: excludeDefaultPaths
Get or set whether default class library paths are included.

NOTE::
If sclang is started with -a the class library paths are excluded and this value 
is ignored. The default class library paths are Platform.classLibraryDir, and
the system and user extensions directories.
::

SUBSECTION:: Relative Paths

Depending on how you provide relative include/exclude paths, they resolve differently.
There are three cases to consider:

LIST::
## Paths provided by class methods resolve to the current runtime directory.
## Configuration files loaded via CODE::sclang -l:: resolve paths to the
file's parent directory.
## Using the CODE::SCLANG_CONF_PATH:: environment variable to load configuration
files makes relative paths resolve to the parent directory of the executed binary
(CODE::sclang/scide::).
::

Further you can use CODE::USERHOME:: and CODE::PROGRAM_LOCATION:: as substitute
strings for the current user's home directory and the parent directory of the
running binary respectively. However this only works for the last two options
(use link::Classes/Platform:: for class methods). Finally CODE::USERNAME:: can
be utilized as a substitute string for language configuration paths themselves
passed by CODE::SCLANG_CONF_PATH::.

SUBSECTION:: Compiler Warnings

METHOD:: postInlineWarnings
Get or set the compiler flag, whether warnings should be posted if a FunctionDef
cannot be inlined.

CODE::
LanguageConfig.postInlineWarnings_(true)  // warn
if(0.5.coin) { var x; x = 10.rand; x + 1 } { 10 };
LanguageConfig.postInlineWarnings_(false)  // ignore it.
if(0.5.coin) { var x; x = 10.rand; x + 1 } { 10 };
::
